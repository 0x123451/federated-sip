# process settings
fork=yes
children=2

# uncomment for debug
# fork=no
# children=1

# logging and debug settings
debug=<%= debug_level %>
log_stderror=no
log_facility=<%= log_facility %>

# network settings
listen=udp:<%= listen_ip %>:<%= listen_port %>
listen=udp:[<%= listen_ipv6 %>]:<%= listen_port%>
listen=tcp:<%= listen_ip %>:<%= listen_port %>
listen=tcp:[<%= listen_ipv6 %>]:<%= listen_port%>
listen=tls:<%= listen_ip %>:<%= tls_listen_port %>
listen=tls:[<%= listen_ipv6 %>]:<%= tls_listen_port%>
listen=ws:<%= listen_ip %>:<%= ws_listen_port %>
listen=ws:[<%= listen_ipv6 %>]:<%= ws_listen_port %>

dns_try_ipv6 = 1

tcp_keepalive = 1
tcp_keepcount = 5
tcp_keepidle = 15
tcp_keepinterval = 10

#set module path
mpath="<%= module_path %>"

user=<%= user %>
group=<%= group %>

loadmodule "proto_tcp.so"
loadmodule "proto_udp.so"
loadmodule "proto_tls.so"
loadmodule "proto_ws.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "db_sqlite.so"
loadmodule "dialog.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "sipmsgops.so"
loadmodule "mi_fifo.so"
loadmodule "uri.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
loadmodule "avpops.so"
loadmodule "pike.so"
loadmodule "domain.so"
loadmodule "enum.so"
loadmodule "stun.so"

# ---- tcp params ----
modparam("proto_tcp","tcp_async",1)

# ---- tm params ----
# enable transactional avps
modparam("tm", "onreply_avp_mode", 1)

# ---- fifo params ----
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")

# ---- record route params ----
# append from tag to the RR.  This is used to help determine
modparam("rr", "append_fromtag", 1)

# ---- registrar params ----
modparam("registrar", "received_avp", "$avp(received)")
modparam("registrar", "attr_avp", "$avp(attr)")

# ---- nathelper params ----
modparam("nathelper","natping_interval", 15)
modparam("nathelper", "received_avp", "$avp(received)")

# ----- db_sqlite params ----
modparam("db_sqlite", "load_extension", "/usr/lib/sqlite3/pcre.so")

# ---- dialog params ----
modparam("dialog", "db_mode", 1)
modparam("dialog", "db_url", "<%= dialog_db_url %>")

# ---- user location params ----
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "db_url", "<%= usrloc_db_url %>")

# when a UAC sends nated register set a branch flag before saving.
# when lookup is called, usrloc will restore the branch flag and let us
# detect a nated "callee" or UAS
modparam("usrloc", "nat_bflag","uasnat")
# use the domain portion to match users - not just the user portion
modparam("usrloc", "use_domain",1)

# ---- auth params ----
modparam("auth_db", "calculate_ha1", 0)
modparam("auth_db", "password_column", "ha1")
modparam("auth_db", "db_url", "<%= auth_db_url %>")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", 1)

# ---- avpops params ----
modparam("avpops", "db_url", "<%= avp_db_url %>")
modparam("avpops","use_domain",1)

# ----- pike params ----
modparam("pike", "sampling_time_unit", 10)
modparam("pike", "reqs_density_per_unit", 30)
modparam("pike", "remove_latency", 3600)

# ----- domain params ----
modparam("domain", "db_url", "<%= domain_db_url %>")

# ----- stun params -----
# keeps logs free of parse errors on stun packets
modparam("stun","primary_ip","<%= listen_ip %>")
modparam("stun","primary_port","<%= listen_port %>")
# alternate ip required, using localhost for compatibility
modparam("stun","alternate_ip","127.0.0.1")
modparam("stun","alternate_port","6050")

# ----- rtpengine params ----
modparam("rtpengine", "rtpengine_sock", "udp:<%= listen_ip %>:60000")

# ----- tls params ----
modparam("proto_tls", "require_cert", "0")
modparam("proto_tls", "verify_cert", "0")
modparam("proto_tls", "tls_method", "SSLv23")
# server side tls only (not making outbound tls connections)
modparam("proto_tls", "certificate",
	 "/usr/local/etc/opensips/tls/server/server-cert.pem")
modparam("proto_tls", "private_key",
	 "/usr/local/etc/opensips/tls/server/server-privkey.pem")
modparam("proto_tls", "ca_list",
	 "/usr/local/etc/opensips/tls/server/server-calist.pem")

# branch flags
# ------------
# uasnat - UAS behind nat
# uas_ws - UAS is a websockets client

# avps
# ------------
# uacnat - transactional avp for detecting UAC behind nat on response
# attr   - set on before userlocation save, and restored on lookup

# routes
# ------
# route                        - general request processing
# route["initial_requests"]    - initial request route processing
# route["sequential_requests"] - sequential request route processing
# branch_route["rtpengine"]    - processing for rtpengine flags per branch
# onreply_route["reply"]       - reply processing for nat and rtpengine flags

# main request routing logic
route{
  # choose to enable, or disable enum lookups by setting this to 1 or 0
  $var(use_enum)=<%= use_enum %>;

  # use variables in the xlog to make log output "standardized" in spacing
  $var(prefix)="route                     :";

  # some scanner mitigation

  # check to see if the src ip is flooding us and drop requests accordingly
  if ( src_ip != myself && !pike_check_req() ) { exit; }
  # if the packet contains sipviscious or freindly-scanner drop it
  if( $ua=~"^sipvicious"       ||
      $ua=~"^freindly-scanner" ||
      $ua=~"^VaxSip"           ||
      $ua=~"^sipcli")
  { exit; }

  # kill any requests that we do not handle
  if (!is_method("UPDATE|PRACK|SUBSCRIBE|NOTIFY|REGISTER|INVITE|ACK|BYE|
                  CANCEL|REFER|OPTIONS|INFO|MESSAGE"))
  {
    sl_send_reply("405","Method Not Allowed");
    exit;
  }

  # we do not handle any subscriptions locally
  if (is_method("SUBSCRIBE") && uri == myself) {
    sl_send_reply("405","Method Not Allowed");
    exit;
  }

  # kill anything that is looping
  if (!mf_process_maxfwd_header("10")) {
    sl_send_reply("483","Too Many Hops");
    exit;
  }

  # record route all requests b/c it doesn't hurt, and some
  # UA are buggy and throw away route sets
  if (!is_method("REGISTER")) {
    record_route();
  }

  # setup avp for detecting uac behind a nat in the response
  $avp(uacnat)=0;

  # UAC nat detection
  #
  #  See the following url for more options  :
  #  http://www.opensips.org/html/docs/modules/2.1.x/nathelper.html#id294107
  #

  #  We are also checking to see if a Record-Route header is present.
  #  We only want to do contact rewriting for user agents that are "local"
  #  to us, aka immediately adjacent not using other proxy servers.
  if ( af == INET && !is_present_hf("Record-Route") && nat_uac_test("35")) {
    xlog("L_INFO","$var(prefix) $cs: $rm: request from uac behind nat\n");
    # append recieved and port to first via so we can route responses back
    force_rport();
    # set a transactional avp letting us know that the uac is behind a nat
    $avp(uacnat)=1;
    if (is_method("REGISTER")) {
      fix_nated_register();
    } else {
      fix_nated_contact();
      # this helps us know if the UAS (requested destination) in a
      # sequential request is behind a nat
      search_append('Contact:.*sip:[^>[:cntrl:]]*', ';nat=yes');
    }
  }

  # we will hand off to either initial or sequential request processing blocks
  # that will return and continue executing the code after this if/else

  # initial request processing
  if (!has_totag()) {
    route("initial_requests");
  }
  # sequential request processing
  else {
    if (is_method("CANCEL|BYE")) {
      rtpengine_delete();
    }
    route("sequential_requests");
  }

  # set our reply route
  t_on_reply("reply");

  # all processing has been completed, t_relay to the next hop
  if (!t_relay()) {
    sl_reply_error();
  };
  exit;
}

# process initial requests
route["initial_requests"] {
  $var(prefix)="route[initial_requests]   :";
  if(!is_method("REGISTER|OPTIONS")){
    xlog("L_INFO","$var(prefix) $cs: $rm: received initial request to $ru\n");
  }
  # preloaded route checking
  if (loose_route() && !is_method("ACK|CANCEL")) {
    xlog("L_INFO","$var(prefix) $cs: $rm: initial request with preloaded routes [$fu/$tu/$ru/$ci] - rejecting\n");
    sl_send_reply("403","Preload Route denied");
    exit;
  }

  # we only accept requests to a user, not to a server
  if ($rU==NULL && !is_method("REGISTER|OPTIONS")) {
    # request with no Username in RURI
    sl_send_reply("484","Address Incomplete");
    exit;
  }

  # set the route for processing branches
  t_on_branch("rtpengine");

  # Detect if UAC is websockets client and set flag for later processing
  if ( proto == WS ) {
    setflag(uac_ws);
  }

  # handle registrations
  if (is_method("REGISTER")) {
    # authenticate the REGISTER requests
    if (is_from_local("$var(attrs)")) {
       if($var(attrs)=="noauth")
         $avp(unauthorized)=1;
    }

    # do not challenge domains that are "unauthorized"
    if($avp(unauthorized)==0){
      if (!www_authorize("", "subscriber")) {
        www_challenge("", "0");
        exit;
      }
      # make sure they are registering a legitimate AOR,
      # not just using correct auth credentials
      if (!db_check_to()) {
        xlog("L_INFO","$var(prefix) $cs: $rm: attempt to register with bad To header\n");
        sl_send_reply("403","Forbidden auth ID");
        exit;
      }
    }
    # We have authorized a UAC, now if they are behind a NAT, we need to
    # set the nat branch flag before we save.  This will then be restored
    # on a call to lookup, allowing us to detect a NAT'd UAS or "callee" in
    # a branch route, or onreply route.  In any "main route" the bflag will be
    # for the first branch if there is more than one.
    if ($avp(uacnat)==1) {
      setbflag(uasnat);
    }
    # If the client is using websocket (webrtc) and save the attribute for detection later on location lookup
    if ( isflagset(uac_ws) ) {
      setbflag(uas_ws);
    }

    # save the ip version info in a bflag to be restored on lookup()
    if ( af == INET ) {
      setbflag(uas_ip4);
    } else {
      setbflag(uas_ip6);
    }

    # comment out registration saving to reduce logs
    # xlog("L_INFO","$var(prefix) $cs: $rm: saving registration for $tu\n");
    if (!save("location","p0v")) {
      sl_reply_error();
    }
    exit;
  }

  # CANCEL processing
  if (is_method("CANCEL") && t_check_trans()) {
    # if this is a CANCEL with an associated transaction
    # just let the main route block t_relay
    return;
  } else if (is_method("CANCEL") && !t_check_trans()) {
    # drop CANCEL requests that have no associated transaction
    exit;
  }

  # create dialog
  if (is_method("INVITE")) {
    create_dialog();
    setflag(dialog_created);
    # check if UAC is ipv6
    if(  af == INET6 ) {
      $dlg_val(uac_ipv) = "IP6";
    } else {
      $dlg_val(uac_ipv) = "IP4";
    }
  }
  xlog("L_INFO","$var(prefix) $cs: $rm: fU=$fU fd=$fd rU=$rU\n");

  # Initial INVITE processing
  #
  # We authenticate the user for any INVITE that is to an external domain
  # what does this mean of calling?
  #
  # PSTN
  #   This proxy has no "built in" pstn termination.  We only standardize
  #   numbers to e.164 format from there we will do ENUM lookups on e.164.arpa
  #   e.164.org.  Either of those look ups could succeed and change the RURI to
  #   be an external domain, at which point we will challenge the request user
  #   to authenticate that they are a user of this proxy.  If a user wants to
  #   terminate calls to the pstn, they must add translations to a carrier.
  #
  # TRANSLATIONS
  #   All initial INVITE requests will have alias mapping, and then translations
  #   applied. If a user wants to send calls to a SIP carrier for termination,
  #   they must add a translation that will match the request user portion of
  #   the RURI, then apply an appropriate strip/prefix/translation domain for
  #   the carrier. Be aware that if a e.164 number is detected without the +
  #   prefix, the + will be appended AUTOMATICALLY before translation lookup.
  #
  # SIP
  #   We only openly accept un-authenticated INVITE requests to this proxy with
  #   a domain that we service AKA we are the last hop to a subscriber.  This is
  #   determined by the domains stored in the domain table and will be checked
  #   by is_host_uri_local()
  #
  # PROCESS
  #   Look up any alias, then apply any matching  translation.  If at this point
  #   the domain is external, authenticate.  if the domain is local, we can
  #   proceed to doing a user location lookup, and pass the call.

  if (method=="INVITE" || method=="MESSAGE" || method=="NOTIFY") {

    #  translations are standardized on e164 so fix any leading + formatting
    $var(is_e164) = route("to_e164");

    #  translate request user@domain:port based on database rules
    route("outbound_translations");

    #  if this is an e164 user portion, do an enum lookup if use_enum is enabled
    if ($var(is_e164)) {
      route("enum_query");
    }

    #  ok we have done aliasing, translations, and ENUM lookup
    #  now check to see what the domain is
    if (is_uri_host_local()) {
      route("to_local_domain");
    } else {
      route("challenge_request");

      # non local domain, resolve A/AAAA to determine ipv6/ipv4
      # NOTE this does not do SRV/NAPTR and is not a "complete" solution
      if ( isflagset(dialog_created) ) {
        $var(dest) = $rd;
        $var(dest_ip) = $(var(dest){ip.resolve});
        if ( $var(dest_ip) =~ "^([0-9]{1,3}\.){3}[0-9]{1,3}$" ) {
          xlog("L_INFO","$var(prefix) $cs: $rm: non-local request to IPV4 destination: $var(dest_ip)\n");
          $dlg_val(uas_ipv)="IP4";
        } else {
          xlog("L_INFO","$var(prefix) $cs: $rm: non-local request to IPV6 destination: $var(dest_ip)\n");
          $dlg_val(uas_ipv)="IP6";
        }
      }
    }
  }
  # return to main route block for rtp proxying and t_relay
  return;
}

# process sequential requests
route["sequential_requests"] {
  $var(prefix)="route[sequential_requests]:";
  xlog("L_INFO","$var(prefix) $cs: $rm: received sequential request\n");

  # UAS NAT detection
  # we append ;nat=yes to the contact when we detect NAT on a UAC.  if this
  # paramater is present in the RURI of a sequential request, it means that
  # that the UAS of this request is behind a NAT, and we should set bflag 1
  # to indicate that for the remainder of the transaction
  if (subst_uri('/(sip:.*);nat=yes/\1/')) {
    xlog("L_INFO","$var(prefix) $cs: $rm: uas is behind a nat (previously detected)\n");
    setbflag(uasnat);
  }

  # set the route for processing branches
  t_on_branch("rtpengine");

  # sequential requests should take the path built up from record-routing
  if (loose_route()) {
    xlog("L_INFO","$var(prefix) $cs: $rm: loose routing\n");
  } else {
    if ( is_method("ACK") ) {
      if (! t_check_trans() ) {
        # ACK without matching transaction
        # ignore and discard
        exit;
      } else {
        # ACK to a negative response (wont loose route)
        # just let the main route t_relay
        xlog("L_INFO","$var(prefix) $cs: $rm: received ACK to negative response - relaying\n");
      }
    } else if ( uri != myself ) {
      # some other sequential request that is bogus
      xlog("L_INFO","$var(prefix) $cs: $rm: received bogus sequential request - sending 404\n");
      sl_send_reply("404","Not here");
      exit;
    }
  }
  # set direction flags for uas / uac based processing
  resetbflag(upstream_request);
  if ( is_direction("upstream") ){
    setbflag(upstream_request);
  }
  return;
}

branch_route[rtpengine] {
  $var(prefix)="branch[" + $T_branch_idx + "]                 :";

  xlog("L_INFO","$var(prefix) $cs: $rm: message flags: $mf\n");
  xlog("L_INFO","$var(prefix) $cs: $rm: branch flags: $bf\n");

  # handle rtp proxying for both initial and sequential requests
  if ( (is_method("INVITE") ||
        is_method("ACK") ||
        is_method("PRACK")) &&
       has_body("application/sdp") )
  {
    # store dialog values based on branch flags restored on call to lookup()
    if ( isbflagset(uas_ip4) ) {
      $dlg_val(uas_ipv)="IP4";
    }
    else if ( isbflagset(uas_ip6) ) {
      $dlg_val(uas_ipv)="IP6";
    }

    xlog("L_INFO","$var(prefix) $cs: $rm: uac_ipv=$dlg_val(uac_ipv) uas_ipv=$dlg_val(uas_ipv)\n");

    # set rtpengine flags based on whether uac or uas are websockets
    if (isflagset(uac_ws) && isbflagset(uas_ws)) {
      $var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
      xlog("L_INFO","$var(prefix) $cs: $rm: uac and uas are both websockets\n");
    } else if (isflagset(uac_ws) && !isbflagset(uas_ws)) {
      $var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
      xlog("L_INFO","$var(prefix) $cs: $rm: uac is ws uas is not\n");
    } else if (!isflagset(uac_ws) && isbflagset(uas_ws)) {
      $var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force";
      xlog("L_INFO","$var(prefix) $cs: $rm: uas is ws uac is not\n");
    } else if (!isflagset(uac_ws) && !isbflagset(uas_ws)) {
      $var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
      xlog("L_INFO","$var(prefix) $cs: $rm: neither uac or uas are websocket\n");
    }

    # set the ip version address family
    if ( isbflagset(upstream_request) ){
      $var(rtpengine_flags)=$var(rtpengine_flags) + " address-family=" + $dlg_val(uac_ipv);
    } else {
      $var(rtpengine_flags)=$var(rtpengine_flags) + " address-family=" + $dlg_val(uas_ipv);
    }

    if( is_method("ACK") || is_method("PRACK") ){
      xlog("L_INFO","$var(prefix) $cs: $rm: rtpengine answer $var(rtpengine_flags)\n");
      rtpengine_answer("$var(rtpengine_flags)");
    } else {
      xlog("L_INFO","$var(prefix) $cs: $rm: rtpengine offer $var(rtpengine_flags)\n");
      rtpengine_offer("$var(rtpengine_flags)");
    }
  }
}

onreply_route["reply"] {
  $var(prefix)="onreply_route             :";
  xlog("L_INFO","$var(prefix) $cs: $rs: response\n");
  xlog("L_INFO","$var(prefix) $cs: $rs: message flags: $mf\n");
  xlog("L_INFO","$var(prefix) $cs: $rs: branch flags: $bf\n");

  # rtp proxying for responses
  if ( has_body("application/sdp") ) {

    # save UAS ipv info for rtpengine flags
    if ( !isbflagset(uas_ip4) && !isbflagset(uas_ip6) ) {
      if( af == INET6 ) {
        $avp(uas_ipv)="IP6";
      } else {
        $avp(uas_ipv)="IP4";
      }
    }

    # set rtpengine flags based on whether uac or uas are websockets
    if (isflagset(uac_ws) && isbflagset(uas_ws)) {
      $var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
      xlog("L_INFO","$var(prefix) $cs: $rs: uac and uas are both websockets\n");
    } else if (isflagset(uac_ws) && !isbflagset(uas_ws)) {
      $var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force";
      xlog("L_INFO","$var(prefix) $cs: $rs: uac is ws uas is not\n");
    } else if (!isflagset(uac_ws) && isbflagset(uas_ws)) {
      $var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
      xlog("L_INFO","$var(prefix) $cs: $rs: uas is ws uac is not\n");
    } else if (!isflagset(uac_ws) && !isbflagset(uas_ws)) {
      $var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
      xlog("L_INFO","$var(prefix) $cs: $rs: neither uac or uas are websocket\n");
    }

    # set the ip version address family
    if ( isbflagset(upstream_request) ) {
      $var(rtpengine_flags)=$var(rtpengine_flags) + " address-family=" + $dlg_val(uas_ipv);
      resetbflag(upstream_request);
    } else {
      $var(rtpengine_flags)=$var(rtpengine_flags) + " address-family=" + $dlg_val(uac_ipv);
    }

    if ( $rs=="183" ) {
      xlog("L_INFO","$var(prefix) $cs: $rs: rtpengine offer $var(rtpengine_flags)\n");
      rtpengine_offer("$var(rtpengine_flags)");
    } else if ( $rs=="200" ) {
      xlog("L_INFO","$var(prefix) $cs: $rs: rtpengine answer $var(rtpengine_flags)\n");
      rtpengine_answer("$var(rtpengine_flags)");
    }
  }

  # fix contact for uas behind nat
  if (isbflagset(uasnat)) {
    xlog("L_INFO","$var(prefix) $cs: $rs: uas behind nat (previously detected), fixing contact\n");
    fix_nated_contact();
  }
  else if (nat_uac_test("1")) {
    xlog("L_INFO","$var(prefix) $cs: $rs: uas behind nat, fixing contact\n");
    fix_nated_contact();
  }
}

# helper routes

route["to_e164"] {
  if($rU =~ "^(\+?1?([2-9][0-9]{2}[2-9][0-9]{2}[0-9]{4}))$") {
    # NANP ( +1 NPA NXX XXXX )
    if ($(rU{s.len}) == 10) {
      $rU = "+1" + $rU;
    } else {
      $rU = "+1" + $(rU{s.substr,-10,10});
    }
    xlog("L_NOTICE","$var(prefix) $cs: $rm: NANP e.164 $rU\n");
    return(1);
  } else if ($rU =~ "^(\+?[2-9][0-9]{6,14})$") {
    # International ( + CC XXXXXXXXXXXXX )
    if ($rU !~ "^\+") {
      $rU = "+" + $rU;
    }
    xlog("L_NOTICE","$var(prefix) $cs: $rm: international e.164 $rU\n");
    return(2);
  }
  return(-1);
}

route["enum_query"] {
  # if this is an e.164 number, do an ENUM lookup on it
  if($var(use_enum) == 0)
    return(-1);

  xlog("L_INFO","$var(prefix) $cs: $rm: doing enum lookup on e164.arpa and e164.org\n");
  if(enum_query() || enum_query("e164.org.")){
    xlog("L_INFO","$var(prefix) $cs: $rm: ENUM query set RURI=$ru\n");
    return(1);
  }
  return(-1);
}

route["outbound_translations"] {
  # outbound routing translations
  if(avp_db_query("select tran_strip, tran_prefix, tran_user, tran_domain, tran_port, tran_add_header,tran_strip_port from translations where (from_username='$fU' or from_username IS NULL) and from_domain='$fd' and (match_user_agent like '$ua%' or match_user_agent IS NULL )  and ('$rU' regexp match_regex or match_regex IS NULL) order by tran_priority limit 1","$avp(tran_strip);$avp(tran_prefix);$avp(tran_user);$avp(tran_domain);$avp(tran_port);$avp(tran_add_header);$avp(tran_strip_port)"))
  {
    # if there is a full on user part replacement
    # we do that, and do no strip/prefix
    if($avp(tran_user)!=null) {
      $rU=$avp(tran_user);
    } else {
      # if a translation strip exists, apply it before prefixing
      if($avp(tran_strip)!=null) {
        $rU = $(rU{s.substr, $(avp(tran_strip){s.int}), 0});
      }
      # apply any translation prefix that exists
      if($avp(tran_prefix)!=null) {
        $rU= $avp(tran_prefix)+$rU;
      }
    }

    # translation domain is all or nothing, no partial substitution
    if($avp(tran_domain)!=null) {
      $rd=$avp(tran_domain);
    }

    # translation port is all or nothing, no partial substitution
    # also we can only strip the port if there is no port translation
    if($avp(tran_port)!=null) {
      $rp=$avp(tran_port);
    } else if($avp(tran_strip_port)!=null) {
      $rp="";
    }

    if($avp(tran_add_header)!=null) {
      append_hf("$avp(tran_add_header)");
    }

    xlog("L_INFO","$var(prefix) $cs: $rm: tran_strip=$avp(tran_strip) tran_prefix=$avp(tran_prefix) tran_user=$avp(tran_user) tran_domain=$avp(tran_domain) tran_port=$avp(tran_port) tran_strip_port=$avp(tran_strip_port) tran_add_header=$avp(tran_add_header)\n");
    xlog("L_INFO","$var(prefix) $cs: $rm: post translation RURI=$ru\n");
  }
}

route["to_local_domain"] {
  # this is a local domain, do a user location lookup
  $var(original_ruri)=$ru;
  if (!lookup("location","m") ) {
    xlog("L_INFO","$var(prefix) $cs: $rm: no registration found for $rU - sending 404\n");
    t_newtran();
    t_reply("404", "Not Found");
    exit;
  } else {
    xlog("L_INFO","$var(prefix) $cs: $rm: found registration for $var(original_ruri)\n");
  }
}

route["challenge_request"] {
  if($avp(unauthorized)==0) {
    if (!proxy_authorize("", "subscriber")) {
      xlog("L_INFO","$var(prefix) $cs: $rm: challenging request to external domain $rd\n");
      proxy_challenge("", "0");
      exit;
    } else {
      # caller authorized
      xlog("L_INFO","$var(prefix) $cs: $rm: authorized request\n");
      consume_credentials();
    }
    # check to see if the from header is one of our known users
    if (!db_check_from()) {
      xlog("L_INFO","$var(prefix) $cs: $rm: unknown user in From header - rejecting\n");
      sl_send_reply("403","Forbidden auth ID");
      exit;
    }
  }
}

